import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import java.security.MessageDigest

apply plugin: 'com.android.application'

android {

    compileSdkVersion 28

    defaultConfig {
        applicationId "android.tools"
        minSdkVersion 17
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.beust:jcommander:1.71'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation project(path: ':framework')
    compileOnly 'ice.black.tea:android-17:1.0.0'
    annotationProcessor project(':processor')
}


static def calcMd5(path) {
    MessageDigest md = null;
    try {
        md = MessageDigest.getInstance("MD5")
    } catch (ignored) {
        return ""
    }
    new File(path).eachByte 4096, {
        bytes, size -> md.update(bytes, 0, size)
    }
    return md.digest().collect { String.format "%02x", it }.join()
}


static def readConfig(path) {
    try {
        return new JsonSlurper().parseText(new File(path).text)
    } catch (ignore) {
        return [:]
    }
}


static def writeConfig(path, config) {
    def file = new File(path)
    if (file.exists() || file.createNewFile()){
        def jsonOutput = new JsonOutput()
        file.withPrintWriter { printWriter ->
            printWriter.println(jsonOutput.prettyPrint(jsonOutput.toJson(config)))
        }
    }
}


task buildTools {

    buildTools.dependsOn ":tools:assembleRelease"

    doLast {
        def apkName = "tools-release-unsigned.apk"
        def apkDir = "${project.buildDir}/outputs/apk/release"
        def apkPath = "${apkDir}/${apkName}"
        def apkMd5 = calcMd5(apkPath)

        def rootDir = file("${rootDir}/../link").getAbsolutePath()

        def targetName = "android-tools.apk"
        def targetDir = "${rootDir}/resource/persist"
        def targetPath = "${targetDir}/${targetName}"

        def configDir = "${rootDir}/linktools/configs"
        def configPath = "${configDir}/android_tool.json"
        def config = readConfig(configPath)

        println(config)

        if (config.tools_apk == null || config.tools_apk.md5 != apkMd5) {

            copy {
                println("copy from ${apkPath}")
                println("copy into ${targetPath}")
                from(apkPath)
                into(targetDir)
                rename(apkName, targetName)
            }

            config.ANDROID_TOOL_BRIDGE_APK = [:]
            config.ANDROID_TOOL_BRIDGE_APK.name = targetName
            config.ANDROID_TOOL_BRIDGE_APK.md5 = apkMd5
            config.ANDROID_TOOL_BRIDGE_APK.main = "android.tools.Main"
            config.ANDROID_TOOL_BRIDGE_APK.size = file(targetPath).length()
            config.ANDROID_TOOL_BRIDGE_APK.time = new Date().format("yyyy-MM-dd-HH:mm:ss", TimeZone.getTimeZone("GMT+08:00"))
            config.ANDROID_TOOL_BRIDGE_APK.flag_begin = " -*- output -*- by -*- android -*- tools -*- begin -*- "
            config.ANDROID_TOOL_BRIDGE_APK.flag_end = " -*- output -*- by -*- android -*- tools -*- end -*- "
            writeConfig(configPath, config)
        }
    }
}
